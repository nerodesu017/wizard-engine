// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def t_i: ValueType = ValueType.I32;
def t_l: ValueType = ValueType.I64;
def t_f: ValueType = ValueType.F32;
def t_d: ValueType = ValueType.F64;
def t_s: ValueType = ValueType.V128;
def t_r: ValueType = ValueTypes.ANYREF;

// A cache of commonly-used arrays of types.
component Types {
	def v: Array<ValueType> = [];

	def ii = 	[t_i, t_i];
	def iii = 	[t_i, t_i, t_i];
	def iiii = 	[t_i, t_i, t_i, t_i];
	def ili = 	[t_i, t_l, t_i];
	def il = 	[t_i, t_l];
	def iil = 	[t_i, t_i, t_l];
	def ill = 	[t_i, t_l, t_l];
	def if_ = 	[t_i, t_f];
	def id = 	[t_i, t_d];
	def is = 	[t_i, t_s];
	def i = 	[t_i];
	def e = 	[ValueTypes.EXTERNREF];
	def rr = 	[t_r, t_r];
	def rrr = 	[t_r, t_r, t_r];
	def r = 	[t_r];
	def g = 	[ValueTypes.FUNCREF];
	def ll = 	[t_l, t_l];
	def l = 	[t_l];
	def ff = 	[t_f, t_f];
	def f = 	[t_f];
	def dd = 	[t_d, t_d];
	def si = 	[t_s, t_i];
	def sl = 	[t_s, t_l];
	def sf = 	[t_s, t_f];
	def sd = 	[t_s, t_d];
	def d = 	[t_d];
	def s = 	[t_s];
	def ss = 	[t_s, t_s];
	def sss = 	[t_s, t_s, t_s];
	def ls = 	[t_l, t_s];
	def fs = 	[t_f, t_s];
	def ds = 	[t_d, t_s];
	def h = 	[ValueTypes.I31REF];
	def x = 	[ValueTypes.EXNREF];
}

def unbox_i = Values.v_u;
def unbox_l = Values.v_l;
def unbox_f = Values.v_f;
def unbox_d = Values.v_d;
def unbox_s = Values.v_s;
def unbox_r = Values.v_r;

// A cache of parameter specifications for commonly-used parameter combinations.
component Params {
	def ii = 	p2(Types.ii, 	unbox_i, unbox_i);
	def iii = 	p3(Types.iii, 	unbox_i, unbox_i, unbox_i);
	def iiii = 	p4(Types.iiii, 	unbox_i, unbox_i, unbox_i, unbox_i);
	def ili = 	p3(Types.ili, 	unbox_i, unbox_l, unbox_i);
	def il = 	p2(Types.il, 	unbox_i, unbox_l);
	def iil = 	p3(Types.iil, 	unbox_i, unbox_i, unbox_l);
	def ill = 	p3(Types.ill, 	unbox_i, unbox_l, unbox_l);
	def if_ = 	p2(Types.if_, 	unbox_i, unbox_f);
	def id = 	p2(Types.id, 	unbox_i, unbox_d);
	def is = 	p2(Types.is, 	unbox_i, unbox_s);
	def i = 	p1(Types.i, 	unbox_i);
	def rr = 	p2(Types.rr, 	unbox_r, unbox_r);
	def rrr = 	p3(Types.rrr, 	unbox_r, unbox_r, unbox_r);
	def r = 	p1(Types.r, 	unbox_r);
	def ll = 	p2(Types.ll, 	unbox_l, unbox_l);
	def l = 	p1(Types.l, 	unbox_l);
	def ff = 	p2(Types.ff, 	unbox_f, unbox_f);
	def f = 	p1(Types.f, 	unbox_f);
	def dd = 	p2(Types.dd, 	unbox_d, unbox_d);
	def si = 	p2(Types.si, 	unbox_s, unbox_i);
	def sl = 	p2(Types.sl, 	unbox_s, unbox_l);
	def sf = 	p2(Types.sf, 	unbox_s, unbox_f);
	def sd = 	p2(Types.sd, 	unbox_s, unbox_d);
	def d = 	p1(Types.d, 	unbox_d);
	def s = 	p1(Types.s, 	unbox_s);
	def ss = 	p2(Types.ss, 	unbox_s, unbox_s);
	def sss = 	p3(Types.sss, 	unbox_s, unbox_s, unbox_s);
	def ls = 	p2(Types.ls, 	unbox_l, unbox_s);
	def fs = 	p2(Types.fs, 	unbox_f, unbox_s);
	def ds = 	p2(Types.ds, 	unbox_d, unbox_s);
}



// Caches commonly-used signatures for convenience and to save memory.
// Type abbreviations:
//    i=i32    l=i64   f=f32   d=f64   r=anyref   e=externref   g=funcref   s=v128   h=i31ref
component SigCache {
	// Arrays of value types are cached separately and used in different signatures.
	def arr_v: Array<ValueType> = [];
	def arr_ii: Array<ValueType> = [ValueType.I32, ValueType.I32];
	def arr_iii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32];
	def arr_iiii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32];
	def arr_ili: Array<ValueType> = [ValueType.I32, ValueType.I64, ValueType.I32];
	def arr_il: Array<ValueType> = [ValueType.I32, ValueType.I64];
	def arr_iil: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I64];
	def arr_ill: Array<ValueType> = [ValueType.I32, ValueType.I64, ValueType.I64];
	def arr_if: Array<ValueType> = [ValueType.I32, ValueType.F32];
	def arr_id: Array<ValueType> = [ValueType.I32, ValueType.F64];
	def arr_is: Array<ValueType> = [ValueType.I32, ValueType.V128];
	def arr_i: Array<ValueType> = [ValueType.I32];
	def arr_e: Array<ValueType> = [ValueTypes.EXTERNREF];
	def arr_rr: Array<ValueType> = [ValueTypes.ANYREF, ValueTypes.ANYREF];
	def arr_rrr: Array<ValueType> = [ValueTypes.ANYREF, ValueTypes.ANYREF, ValueTypes.ANYREF];
	def arr_r: Array<ValueType> = [ValueTypes.ANYREF];
	def arr_g: Array<ValueType> = [ValueTypes.FUNCREF];

	def arr_ll: Array<ValueType> = [ValueType.I64, ValueType.I64];
	def arr_l: Array<ValueType> = [ValueType.I64];

	def arr_ff: Array<ValueType> = [ValueType.F32, ValueType.F32];
	def arr_f: Array<ValueType> = [ValueType.F32];

	def arr_dd: Array<ValueType> = [ValueType.F64, ValueType.F64];
	def arr_si: Array<ValueType> = [ValueType.V128, ValueType.I32];
	def arr_sl: Array<ValueType> = [ValueType.V128, ValueType.I64];
	def arr_sf: Array<ValueType> = [ValueType.V128, ValueType.F32];
	def arr_sd: Array<ValueType> = [ValueType.V128, ValueType.F64];
	def arr_d: Array<ValueType> = [ValueType.F64];
	def arr_s: Array<ValueType> = [ValueType.V128];
	def arr_ss: Array<ValueType> = [ValueType.V128, ValueType.V128];
	def arr_sss: Array<ValueType> = [ValueType.V128, ValueType.V128, ValueType.V128];
	def arr_ls: Array<ValueType> = [ValueType.I64, ValueType.V128];
	def arr_fs: Array<ValueType> = [ValueType.F32, ValueType.V128];
	def arr_ds: Array<ValueType> = [ValueType.F64, ValueType.V128];
	def arr_h: Array<ValueType> = [ValueTypes.I31REF];
	def arr_x: Array<ValueType> = [ValueTypes.EXNREF];

	// Very commonly used signatures.
	def v_v = S(arr_v, arr_v);

	def i_v = S(arr_i, arr_v);
	def l_v = S(arr_l, arr_v);

	def v_i = S(arr_v, arr_i);
	def v_l = S(arr_v, arr_l);
	def v_f = S(arr_v, arr_f);
	def v_d = S(arr_v, arr_d);

	def i_i = S(arr_i, arr_i);
	def i_l = S(arr_i, arr_l);
	def i_f = S(arr_i, arr_f);
	def i_d = S(arr_i, arr_d);
	def ii_i = S(arr_ii, arr_i);
	def iii_i = S(arr_iii, arr_i);
	def iii_v = S(arr_iii, arr_v);
	def iiii_v = S(arr_iiii, arr_v);
	def ii_v = S(arr_ii, arr_v);
	def il_v = S(arr_il, arr_v);
	def if_v = S(arr_if, arr_v);
	def id_v = S(arr_id, arr_v);

	def ili_i = S(arr_ili, arr_i);
	def il_l = S(arr_il, arr_l);
	def ill_l = S(arr_ill, arr_l);
	def iil_i = S(arr_iil, arr_i);
	def ill_i = S(arr_ill, arr_i);
	def ili_l = S(arr_ili, arr_l);
	def iii_l = S(arr_iii, arr_l);

	def l_l = S(arr_l, arr_l);
	def l_i = S(arr_l, arr_i);
	def l_f = S(arr_l, arr_f);
	def l_d = S(arr_l, arr_d);
	def ll_l = S(arr_ll, arr_l);
	def ll_i = S(arr_ll, arr_i);

	def f_i = S(arr_f, arr_i);
	def f_l = S(arr_f, arr_l);
	def f_f = S(arr_f, arr_f);
	def f_d = S(arr_f, arr_d);
	def ff_f = S(arr_ff, arr_f);
	def ff_i = S(arr_ff, arr_i);

	def d_i = S(arr_d, arr_i);
	def d_l = S(arr_d, arr_l);
	def d_f = S(arr_d, arr_f);
	def d_d = S(arr_d, arr_d);
	def dd_d = S(arr_dd, arr_d);
	def dd_i = S(arr_dd, arr_i);

	def v_e = S(arr_v, arr_e);
	def v_g = S(arr_v, arr_g);
	def e_v = S(arr_e, arr_v);
	def g_v = S(arr_g, arr_v);
	def e_i = S(arr_e, arr_i);
	def g_i = S(arr_g, arr_i);

	def r_i = S(arr_r, arr_i);
	def r_r = S(arr_r, arr_r);
	def rr_i = S(arr_rr, arr_i);

	def v_r = S(arr_v, arr_r);
	def v_s = S(arr_v, arr_s);
	def v_h = S(arr_v, arr_h);

	def s_s = S(arr_s, arr_s);
	def ss_s = S(arr_ss, arr_s);
	def sss_s = S(arr_sss, arr_s);

	def s_i = S(arr_s, arr_i);
	def s_l = S(arr_s, arr_l);
	def s_f = S(arr_s, arr_f);
	def s_d = S(arr_s, arr_d);

	def i_s = S(arr_i, arr_s);
	def l_s = S(arr_l, arr_s);
	def f_s = S(arr_f, arr_s);
	def d_s = S(arr_d, arr_s);
	def is_s = S(arr_is, arr_s);
	def ls_s = S(arr_ls, arr_s);
	def fs_s = S(arr_fs, arr_s);
	def ds_s = S(arr_ds, arr_s);
	def si_s = S(arr_si, arr_s);
	def sl_s = S(arr_sl, arr_s);
	def sf_s = S(arr_sf, arr_s);
	def sd_s = S(arr_sd, arr_s);

	def is_v = S(arr_is, arr_v);

	def x_v = S(arr_x, arr_v);
	def v_x = S(arr_v, arr_x);

	private def S(params: Array<ValueType>, results: Array<ValueType>) -> SigDecl {
		var sig = SigDecl.new(true, ValueTypes.NO_HEAPTYPES, params, results);
		Canon.globalCache.insert(sig);
		return sig;
	}
}

class ParamSpec(types: Array<ValueType>) {
	var linkage: TargetParamLinkage;
}

class ParamSpecOf<P> extends ParamSpec {
	def unbox: Range<Value> -> P;

	new(types: Array<ValueType>, unbox) super(types) { }

	def apply<R>(f: P -> R, args: Range<Value>) -> R {
		return f(unbox(args));
	}
}

def p1<A>(types: Array<ValueType>, a: Value -> A) -> ParamSpecOf<A> {
	return ParamSpecOf<A>.new(types, unbox1(a, _));
}
def p2<A, B>(types: Array<ValueType>, a: Value -> A, b: Value -> B) -> ParamSpecOf<(A, B)> {
	return ParamSpecOf<(A, B)>.new(types, unbox2(a, b, _));
}
def p3<A, B, C>(types: Array<ValueType>, a: Value -> A, b: Value -> B, c: Value -> C) -> ParamSpecOf<(A, B, C)> {
	return ParamSpecOf<(A, B, C)>.new(types, unbox3(a, b, c, _));
}
def p4<A, B, C, D>(types: Array<ValueType>, a: Value -> A, b: Value -> B, c: Value -> C, d: Value -> D) -> ParamSpecOf<(A, B, C, D)> {
	return ParamSpecOf<(A, B, C, D)>.new(types, unbox4(a, b, c, d, _));
}


def unbox1<A>(a: Value -> A, p: Range<Value>) -> A {
	return a(p[0]);
}
def unbox2<A, B>(a: Value -> A, b: Value -> B, p: Range<Value>) -> (A, B) {
	return (a(p[0]), b(p[1]));
}
def unbox3<A, B, C>(a: Value -> A, b: Value -> B, c: Value -> C, p: Range<Value>) -> (A, B, C) {
	return (a(p[0]), b(p[1]), c(p[2]));
}
def unbox4<A, B, C, D>(a: Value -> A, b: Value -> B, c: Value -> C, d: Value -> D, p: Range<Value>) -> (A, B, C, D) {
	return (a(p[0]), b(p[1]), c(p[2]), d(p[2]));
}

def box1<A>(a: A -> Value, v: A) -> HostResult {
	return HostResult.Value1(a(v));
}
def box2<A, B>(a: A -> Value, b: B -> Value, v: (A, B)) -> HostResult {
	return HostResult.ValueN([a(v.0), b(v.1)]);
}
def box3<A, B, C>(a: A -> Value, b: B -> Value, c: C -> Value, v: (A, B, C)) -> HostResult {
	return HostResult.ValueN([a(v.0), b(v.1), c(v.2)]);
}
def box4<A, B, C, D>(a: A -> Value, b: B -> Value, c: C -> Value, d: D -> Value, v: (A, B, C, D)) -> HostResult {
	return HostResult.ValueN([a(v.0), b(v.1), c(v.2), d(v.3)]);
}
