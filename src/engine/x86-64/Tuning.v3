// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Options that control techniques that primarily impact interpreter performance.
class X86_64InterpreterTuning {
	// Interpreter tuning settings; no effect on correctness
	var threadedDispatch = true;	// inline dispatch at the end of every handler
	var handlerAlignment = 8;	// align handler code in memory
	var dispatchEntrySize = 4;	// size of each dispatch table entry
	var inlineAllLEBs = false;	// always inline LEB slow cases

	// JIT tuning settings; no effect on correctness
	var trackFloatZeroConst = true;
	var trackFloat32Const = false;		// XXX: enable
	var spcArgsInRegs     = false;		// XXX: implement
	var constantFolding   = true;
	var iselImmediates    = true;
	var lazySlotZeroing   = false;
	var spcTagging = SpcTagging.ON_DEMAND;

	// Required for trap location reporting
	var recordCurIpForTraps = true;

	// Required for correct GC tracing; turn off only for performance testing
	var taggedValues = spcTagging != SpcTagging.NONE;
	var tagChecks = spcTagging.tag_checks;

	// Required for instrumentation; turn off if no instrumentation support needed
	var dispatchTableReg = true;
	var cacheFrameAccessor = true;

	// Required for multi-tier execution; interpreter calls target code entrypoint instead of itself.
	var multiTierSupport = true;

	// Required for supporting the multi-memory extension.
	var multiMemorySupport = true;

	// Required for full spec compliance; turn off only for performance testing
	var useTypeTagTable = true;	// enables support for value types with heap type indices
	var complexBlockTypes = true;
	var simdSupport = true;
}
enum SpcTagging			(lazy_locals: bool, lazy_ops: bool, tag_checks: bool) {
	ON_DEMAND		(false, false, true),
	ON_DEMAND_LAZY_LOCALS	(true, false, false),
	AGG			(false, false, true),
	AGG_LOCALS		(false, true, true),
	AGG_OPS			(true, false, true),
	NONE			(false, false, false)
}