// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def E = MonitorRegistry.register(
	"branches", "Tallies direct and indirect branches.",
	BranchMonitor.new());
def inCodeMode_ = E // TODO: return Option<int>
	.addOption("code|c", "emit report with code");
def showZeroCounts_ = E // TODO: return Option<bool>
	.addOption("zero|z", "show zero counts");

var inCodeMode = false;
var showZeroCounts = false;
class BranchMonitor extends Monitor {
	def funcs = Vector<(Module, ControlInstrumentation)>.new();
	def bi = BytecodeIterator.new();

	def configure(args: string) -> string {
		def argMap = MonitorUtil.argMapFrom(args);
		if (argMap.has("code") || argMap.has("c")) {
			inCodeMode = true;
			return null;
		}
		if (argMap.has("zero") || argMap.has("z")) {
			showZeroCounts = true;
			return null;
		}
		def buf = StringBuilder.new();
		buf.put1("invalid argument(s) \"%s\"", args);
		return buf.toString();
	}

	def onParse(module: Module) {
		var i = ControlInstrumenter.new();
		i.entry = false;
		i.branches = true;
		i.loops = false;
		i.ends = false;

		var mm = ModuleMonitor.new(module);
		mm.forEachFunc(MonitorUtil.isNotImport, instrument(module, _, i));
	}
	def instrument(module: Module, func: FuncDecl, i: ControlInstrumenter) {
		var ins = i.instrument(module, func);
		if (ins != null) funcs.put(module, ins);
	}
	def onFinish(i: Instance) {
		print(funcs);
	}
	def onExit(code: int) {
		print(funcs);
	}
}

// Output report summary for a func to STDOUT
def OUT = Trace.OUT;
def TRACER = InstrTracer.new();
def print(funcs: Vector<(Module, ControlInstrumentation)>) {
	var bi = BytecodeIterator.new();
	for (i < funcs.length) {
		var e = funcs[i], module = e.0, ins = e.1;
		if (!showZeroCounts && !ins.isNonZero()) continue;
		OUT.puts(Palette.FUNC)
			.put1("func %q:", ins.func.render(module.names, _))
			.puts(Palette.DEFAULT)
			.outln();
		bi.reset(ins.func);
		if (inCodeMode) {
			printCode(module, bi, ins);
			continue;
		}
		
		for (e in ins.entries) {
			OUT.puts(Palette.LNO)
				.mark()
				.put1("+%d", e.0)
				.rjustify_mark(5)
				.puts(Palette.DEFAULT)
				.putc(' ');
			bi.at(e.0);
			bi.traceOrig(OUT, module, TRACER);
			OUT.puts(":\t [");
			var taken = ins.getBrCounts(e.0);
			for (j < taken.length) {
				if (j > 0) OUT.csp();
				if (taken[j] > 0) OUT.puts(Palette.COUNT);
				else OUT.puts(Palette.DEFAULT).puts(Palette.INACTIVE);
				OUT.putd(taken[j]);
				OUT.puts(Palette.DEFAULT);
			}
			OUT.putc(']').outln();
		}
		
	}
}

// Output code report for a func to STDOUT
def printCode(module: Module, bi: BytecodeIterator, ins: ControlInstrumentation) {
	// Use sidetable to generate a control flow graph.
	// Later used to visually depict control flow edges.
	var func = ins.func;
	def st = func.sidetable;
	def stMap = SidetableMap.new(func);
	def cfg = HashMap<int, Vector<(int, u64)>>.new(int.!<int>, int.==);
	for (bi = bi.reset(func); bi.more(); bi.next()) {
		def op = bi.current();
		match(op) {
			IF, BR_IF, BR_ON_NULL, BR_ON_NON_NULL => {
				var taken = ins.getBrCounts(bi.pc);
				def stp = stMap[bi.pc];
				def stEntry = st.getBrEntry(stp);
				def padding = if(stEntry.dpc > 0, -1, 0);
				def target = bi.pc + stEntry.dpc + padding;
				// add outward edges
				if (!cfg.has(bi.pc)) cfg[bi.pc] = Vector<(int, u64)>.new();
				cfg[bi.pc].put(target, taken[1]);
				cfg[bi.pc].put(bi.nextPc(), taken[0]);

				// add inward edges
				if (!cfg.has(target)) cfg[target] = Vector<(int, u64)>.new();
				cfg[target].put(bi.pc, taken[1]);
				if (!cfg.has(bi.nextPc())) cfg[bi.nextPc()] = Vector<(int, u64)>.new();
				cfg[bi.nextPc()].put(bi.pc, taken[0]);
			}
			BR_TABLE => {
				var taken = ins.getBrCounts(bi.pc);
				var stp = stMap[bi.pc];
				var stEntry = st.getBrEntry(stp);
				def noOfTargets = stEntry.dpc;
				for (i = 1; i <= noOfTargets; i++) {
					stp = stp + 4;
					stEntry = st.getBrEntry(stp);
					def target = bi.pc + stEntry.dpc + i - 1;
					// add outward edge
					if (!cfg.has(bi.pc)) cfg[bi.pc] = Vector<(int, u64)>.new();
					cfg[bi.pc].put(target, taken[i - 1]);

					// add inward edge
					if (!cfg.has(target)) cfg[target] = Vector<(int, u64)>.new();
					cfg[target].put(bi.pc, taken[i - 1]);
				}
			}
			_ => ;
		}
	}

	for (bi = bi.reset(func); bi.more(); bi.next()) {
		def op = bi.current();
		// search the edges
		match (op) {
			IF, BR_IF, BR_TABLE => {
				if (cfg.has(bi.pc)) {
					outputInstr(module, true, false, bi, OUT);
					OUT.puts(Palette.TARGET)
						.puts("  --> ");
					def edges = cfg[bi.pc];
					for (i < edges.length) {
						if (i > 0) OUT.csp();
						OUT.puts(Palette.TARGET)
							.put1("+%d", edges[i].0)
							.puts(": ")
							.puts(Palette.DEFAULT);
						if (edges[i].1 == 0) OUT.puts(Palette.UNREACHABLE);
						else OUT.puts(Palette.COUNT);
						OUT.putd(edges[i].1).puts(Palette.DEFAULT);
					}
				} else {
					outputInstr(module, false, false, bi, OUT);
				}
			}
			_ => {
				if (cfg.has(bi.pc)) {
					outputInstr(module, false, true, bi, OUT);
					OUT.puts(Palette.SOURCE)
						.puts("  <-- ");
					def edges = cfg[bi.pc];
					for (i < edges.length) {
						if (i > 0) OUT.csp();
						OUT.puts(Palette.SOURCE)
							.put1("+%d", edges[i].0)
							.puts(": ")
							.puts(Palette.DEFAULT);
						if (edges[i].1 == 0) OUT.puts(Palette.UNREACHABLE);
						else OUT.puts(Palette.COUNT);
						OUT.putd(edges[i].1).puts(Palette.DEFAULT);
					}
				} else {
					outputInstr(module, false, false, bi, OUT);
				}
			}
		}
		OUT.outln();
	}
}

// output instr helper
def outputInstr(module: Module, source: bool, target: bool, bi: BytecodeIterator, out: TraceBuilder) {
	if (source) out.puts(Palette.SOURCE);
	else if (target) out.puts(Palette.TARGET);
	else out.puts(Palette.LNO);

	out.mark()
		.put1("+%d", bi.pc)
		.rjustify_mark(5)
		.sp();
	if (source || target) out.puts(Palette.SEPARATOR);
	else out.puts(Palette.DEFAULT);
	out.puts("    ").mark();
	bi.traceOrig(out, module, TRACER);
	var width = 22;
	if (WizengOptions.color) width += 11;
	out.ljustify_mark(width).puts(Palette.DEFAULT);
}

