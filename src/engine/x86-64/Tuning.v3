// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// JIT tuning settings; no effect on correctness
component SpcTuning {
	def trackFloatZeroConst = true;
	def trackFloat32Const = false;		// XXX: enable
	def spcArgsInRegs     = false;		// XXX: implement
	def intConst          = true;
	def constantFolding   = true;
	def iselImmediates    = true;
	def lazySlotZeroing   = false;
	def multiReg          = true;
	def tagging = SpcTagging.ON_DEMAND;
	def jitOnly           = false;
	def intOnly           = false;
}
// Interpreter tuning settings.
class X86_64InterpreterTuning {
	// Interpreter tuning settings; no effect on correctness
	def threadedDispatch = true;	// inline dispatch at the end of every handler
	def handlerAlignment = 8;	// align handler code in memory
	def dispatchEntrySize = 4;	// size of each dispatch table entry
	def inlineAllLEBs = false;	// always inline LEB slow cases

	// Required for trap location reporting
	def recordCurIpForTraps = true;

	// Required for correct GC tracing; turn off only for performance testing
	def taggedValues = SpcTuning.tagging != SpcTagging.NONE;
	def tagChecks = SpcTuning.tagging.tag_checks;

	// Required for instrumentation; turn off if no instrumentation support needed
	def dispatchTableReg = true;
	def cacheFrameAccessor = true;

	// Required for multi-tier execution; interpreter calls target code entrypoint instead of itself.
	def multiTierSupport = !SpcTuning.intOnly;

	// Required for supporting the multi-memory extension.
	def multiMemorySupport = true;

	// Required for full spec compliance; turn off only for performance testing
	def useTypeTagTable = true;	// enables support for value types with heap type indices
	def complexBlockTypes = true;
	def simdSupport = true;
}
enum SpcTagging			(lazy_locals: bool, lazy_ops: bool, tag_checks: bool) {
	ON_DEMAND		(false, false, true),
	ON_DEMAND_LAZY_LOCALS	(true, false, false),
	AGG			(false, false, false),
	AGG_LOCALS		(false, true, false),
	AGG_OPS			(true, false, false),
	NONE			(true, true, false)
}