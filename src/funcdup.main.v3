// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Main entrypoint to an wasm file format dumping utility.
def main(args: Array<string>) -> int {
	var engine = Engine.new();

	engine.extensions = Extension.set.all;
	var func = -1;

	// Parse options and extract module and module arguments
	for (i < args.length) {
		var a = args[i];
		if (a.length > 0 && a[0] == '-') {
			if (EngineOptions.parse(engine, a)) {
				// ok
			} else if (Strings.startsWith(a, "-func=")) {
				func = int.!(Ints.parsePosDecimal(a, 6).1);
			} else {
				return ErrorBuilder.new()
					.puts("objdump: unrecognized option ")
					.putsq(a)
					.ln()
					.exit(1);
			}
			args[i] = null;
		} else if (!Strings.endsWith(a, ".wasm")) {
			return ErrorBuilder.new()
				.puts(a)
				.puts(": unknown file format, expected .wasm\n")
				.exit(4);
		}
	}

	for (a in args) {
		if (a == null) continue;
		var exit = parseAndDump(engine, a);
		if (exit != 0) return exit;
	}
	return 0;
}

def parseAndDump(engine: Engine, path: string) -> int {
	// Parse the binary module
	var result = engine.loadWasmFile(path);
	var module: Module;
	match (result) {
		Ok(m) => module = m;
		FileNotFound => return ErrorBuilder.new()
			.puts("objdump: could not load file ")
			.puts(path)
			.puts("\n")
			.exit(2);
		ParseError(code, path, section, error_index, error_pos, error_msg) => return ErrorBuilder.new()
			.render(code, path, section, error_index, error_pos, error_msg)
			.exit(3);
	}
	var names = if(module.names != null, module.names.lazyDecode());
	// Dump the binary module
	var OUT = Trace.OUT;
	for (i < module.functions.length) {
		var f = module.functions[i];
		OUT.put1("functions[%d] = ", i);
		f.render(names, OUT);
		OUT.put1(": %q", f.sig.render);
		OUT.outln();
	}
	return 0;
}