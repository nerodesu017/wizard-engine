// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Contains flags that explicitly disable features to test their impact on performance.
// Generally, all of these settings should be {false} by default.
component FeatureDisable {
	// Wasm language/extension features
	def simd = false;
	def multiMemory = false;
	def complexBlockTypes = false;	// required for GC and function references

	// Engine features.
	def globalProbes = false;	// required for tracing/probing
	def localProbes = false;	// required for tracing/probing
	def entryProbes = false;	// required for tracing/probing
	def frameAccess = false;	// required for debugging
	def frameUpdate = false;	// required for debugging
	def stacktraces = false;	// required for debugging
	def valueTags = false;		// required for proper GC
	def multiTier = false;		// for multi-tier execution
	def tierUpOsr = false;		// tier-up uses on-stack-replacement
// CGO 2024 "probe" configs:
//   wprobe: emptyProbes=false
//   wempty: emptyProbes=true
//   wfast:  emptyProbes=false
	def emptyProbes = false;	// all probes are empty
}

// Tuning settings for the fast interpreter that have no effect on correctness.
component FastIntTuning {
	def threadedDispatch = true;	// inline dispatch at the end of every handler
	def handlerAlignment = 8;	// align handler code in memory
	def skipRepeatedBlocks = true; // skip repeated BLOCK bytecodes
	def dispatchEntrySize = 4;	// size of each dispatch table entry
	def inlineAllLEBs = false;	// always inline LEB slow cases
	def fourByteSidetable = false;  // sidetable entries are 4-bytes
	def entryTierUpDecrement = 1;	// "cost" of entering a function in the interpreter
	def loopTierUpDecrement = 1;	// "cost" of looping in the interpreter
}

// Tuning settings for the single-pass compiler that have no effect on correctness.
component SpcTuning {
	def trackFloatZeroConst = true;
	def trackFloat32Const = false;		// XXX: enable
	def directCalls = false;		// XXX: implement
	def lazySlotZeroing = false;		// XXX: implement
	def argsInRegs = false;			// XXX: implement
	def fastIntTierUpThreshold = 10;	// threshold at which int -> SPC tiering occurs
	def postOsrTierUpThreshold = 1;		// threshold after completing one OSR tierup
// CGO 2024 "probe" configs:
//   wprobe: instrinsify*=false
//   wempty: instrinsify*=false
//   wfast:  instrinsify*=true
	var intrinsifyCountProbe = true;	// recognize and optimize CountProbes
	var intrinsifyOperandProbe = true; 	// recognize and optimize OperandProbes

// CGO 2024 "speedup" configs:
//   default: constantFolding = true, intConst = true, iselImmediates = true, multiReg = true
//   nokfold: constantFolding = false
//   nok:     constantFolding = false, intConst = false
//   noisel:  iselImmediates = false
//   nomr:    multiReg = false
	def constantFolding = true;
	def intConst = true;
	def iselImmediates = true;
	def multiReg = true;
	def intOnly = false;
	def jitOnly = false;

// CGO 2024 "tagging" configs:
	def tagging = SpcTagging.ONDEMAND;
}

enum SpcTagging		(lazy_locals: bool, lazy_ops: bool, tag_checks: bool) {
	ONDEMAND	(false, false, true),
	LAZYTAGS	(true, false, false),
	EAGERTAGS	(false, false, false),
	EAGERTAGS_L	(false, false, false),
	EAGERTAGS_O	(true, false, false),
	NONE		(true, true, false)
}
