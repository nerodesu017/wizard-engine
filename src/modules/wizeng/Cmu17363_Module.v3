// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Registers "console" as a module that is always available without an option.
def X_UNUSED = ModuleRegistry.add(Cmu17363_ConsoleModule.new("console"));
def Y_UNUSED = ModuleRegistry.add(Cmu17363_JsModule.new("js"));

// HostFunction wrappers.
def LOG_INT = HostFunction.new("log_int", SigCache.i_i, log_int);
def LOG_BOOL = HostFunction.new("log_bool", SigCache.i_i, log_bool);
def RET_ZERO = HostResult.Value1(Values.I32_0);

// Exported: output a signed 32-bit integer to stdout.
def log_int(args: Range<Value>) -> HostResult {
	var a = args[0];
	var v = Values.v_i(a);
	System.puti(v);
	System.ln();
	return RET_ZERO;
}
// Exported: output a boolean "true" or "false".
def log_bool(args: Range<Value>) -> HostResult {
	var a = args[0];
	var v = Values.v_i(a);
	System.puts(if(v != 0, "true\n", "false\n"));
	return RET_ZERO;
}

// Represents {console: {log_int, log_bool}}.
private class Cmu17363_ConsoleModule extends HostModule {
	new(name: string) super(name) { }

	def processFunction(name: string, args: Array<Exportable>, decl: FuncDecl) -> Exportable {
		if (Strings.equal(LOG_INT.name, name)) return LOG_INT;
		if (Strings.equal(LOG_BOOL.name, name)) return LOG_BOOL;
		return null;
	}
}

// Represents {js: {mem}}.
private class Cmu17363_JsModule extends HostModule {
	var memory: Memory;

	new(name: string) super(name) { }

	// The first argument, if present, is the size of the memory.
	def init(args: Array<string>, trace: bool, err: ErrorGen) {
		var size = 0u;
		if (args.length > 1) size = Ints.parsePosDecimal(args[1], 0).1;
		var decl = MemoryDecl.new(size, Max.None, false, ValueType.I32);
		memory = Target.newMemory(decl);
	}

	def processMemory(name: string, args: Array<Exportable>, decl: MemoryDecl) -> Exportable {
		if (Strings.equal("mem", name)) return memory;
		return null;
	}
}
