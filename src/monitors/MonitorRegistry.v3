// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A global registry of all monitors available, e.g. to be selectable by command-line options.
component MonitorRegistry {
	private var list: List<MonitorRegistryEntry>;

	// Register a new monitor with the given name.
	def register(name: string, help: string, m: Monitor) -> MonitorRegistryEntry {
		var entry = MonitorRegistryEntry.new(name, help, m);
		list = List.new(entry, list);
		return entry;
	}
	// Look up a monitor by its exact name, returning {null} if not found.
	def lookupName(name: string) -> MonitorRegistryEntry {
		for (l = list; l != null; l = l.tail) {
			if (Strings.equal(name, l.head.name)) return l.head;
		}
		return null;
	}
	def printHelp() {
		var out = Trace.OUT, H = out.putsln;
		var array = Lists.toArray(list);
		array = Arrays.sort(array, 0, array.length, LT);
		def indent = "    ";
		for (e in array) {
			out.puts(indent);
			out.mark().puts(e.name).ljustify_mark(13);
			out.puts(" ").puts(e.help);
			out.outln();
			for (l = e.options; l != null; l = l.tail) {
				out.puts(indent);
				out.mark().ljustify_mark(13);
				out.puts("     {")
				   .puts(l.head.0)
				   .puts("} ")
				   .puts(l.head.1)
				   .outln();
			}
		}
	}
}
def LT(a: MonitorRegistryEntry, b: MonitorRegistryEntry) -> bool {
	return Strings.asciiLt(a.name, b.name);
}

class MonitorRegistryEntry(name: string, help: string, monitor: Monitor) {
	private var options: List<(string, string)>;

	def newIntOption(name: string, help: string, defval: int) -> Option<int> {
		options = List.new((Strings.format1("%s=<int>", name), help), options);
		return null; // TODO
	}
	def newBoolOption(name: string, help: string) -> Option<bool> {
		options = List.new((name, help), options);
		return null; // TODO
	}
	def newFilterOption(name: string, help: string) -> Option<DeclFilter> {
		options = List.new((Strings.format1("%s=<filter>", name), help), options);
		return null; // TODO
	}
}
